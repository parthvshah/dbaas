version: '3.7'

networks:
  dbaas-network:
   name: dbaas-network

services:
  rmq:
    container_name: rmq_host
    image: rabbitmq:3.8.3-alpine
    networks:
      - dbaas-network
  
  zoo:
    container_name: zoo
    image: zookeeper
    networks:
      - dbaas-network

  orchestrator:
    container_name: orch
    build:
        context: ./orchestrator
        dockerfile: Dockerfile
    command: sh -c "sleep 15 && chmod a+x run.sh && ./run.sh"
    ports:
      - "5000:5000"
    volumes:
        - ./orchestrator:/app
        - ./master_slave:/master_slave
        - "/var/run/docker.sock:/var/run/docker.sock"
    privileged: true
    depends_on:
        - rmq
        - orch_mongo
    networks:
      - dbaas-network
    restart: on-failure
  
  orch_mongo:
    container_name: orch_mongo
    image: mongo
    networks:
      - dbaas-network
    restart: always

  master_slave_1:
    container_name: ms_1
    build:
          context: ./master_slave
          dockerfile: Dockerfile
    command: sh -c "sleep 15 && python -u master_slave.py"
    volumes:
        - ./master_slave:/master_slave
    depends_on:
        - rmq
        - mongo_1
    networks:
      - dbaas-network
    restart: on-failure

  mongo_1:
    container_name: mongo_1
    image: mongo
    networks:
      - dbaas-network
    restart: always


  master_slave_2:
    container_name: ms_2
    build:
          context: ./master_slave
          dockerfile: Dockerfile
    command: sh -c "sleep 15 && python -u master_slave.py"
    volumes:
          - ./master_slave:/master_slave
    depends_on:
        - rmq
        - mongo_2
    networks:
      - dbaas-network
    restart: on-failure

  mongo_2:
    container_name: mongo_2
    image: mongo
    volumes:
      - ./orchestrator:/data
    networks:
      - dbaas-network
    restart: always
  
